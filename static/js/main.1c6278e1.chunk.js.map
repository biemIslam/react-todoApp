{"version":3,"sources":["components/add-todo.js","components/todo-ui.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","props","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","addTodo","state","task","date","time","className","Container","Row","Col","xs","md","size","offset","Form","onSubmit","this","FormGroup","row","Input","onChange","type","placeholder","name","Button","color","Component","TodoUI","todos","taskList","deleteTask","length","map","todo","ListGroupItem","key","check","Label","ListGroup","App","newTask","Math","floor","random","newTodos","delTask","taskLeft","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c6278e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Container, Row, Col, Button, Form, FormGroup, Input } from \"reactstrap\";\r\n\r\nclass AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            task: \"\",\r\n            date: \"\",\r\n            time: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            //set id for input field to be same as state properties above\r\n            // grab the id of the target element and\r\n            // update the state properties \r\n            [e.target.id]: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(this.state);\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            task: \"\",\r\n            date: \"\",\r\n            time: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"input-fields\">\r\n                <Container> \r\n                    <Row>\r\n                        <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <FormGroup row>\r\n                                    <Col xs=\"12\" className=\"form-columns\">\r\n                                        <Input onChange={this.handleChange} value={this.state.task} type=\"text\" id=\"task\" placeholder=\"Enter Your Task\" />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Col xs=\"7\" className=\"form-columns\"> \r\n                                        <Input onChange={this.handleChange} value={this.state.date} type=\"date\" id=\"date\" />\r\n                                    </Col>\r\n                                    <Col xs=\"5\" className=\"form-columns\">\r\n                                        <Input onChange={this.handleChange} value={this.state.time} type=\"select\" name=\"select\" id=\"time\">\r\n                                            <option>Select Time</option>\r\n                                            <option>5:00am</option>\r\n                                            <option>9:00am</option>\r\n                                            <option>4:00pm</option>\r\n                                            {/* <option>5</option> */}\r\n                                        </Input>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Col xs=\"5\" className=\"form-columns\">\r\n                                        <Button color=\"success\">Add Task</Button>\r\n                                    </Col>     \r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react'\r\nimport {\r\n            Container, Row, Col, Button, Form, FormGroup, Input, Label,\r\n            ListGroup, ListGroupItem\r\n        } from \"reactstrap\";\r\n\r\nconst TodoUI = ({ todos, date, deleteTask }) => {\r\n  // const { todos } = props;\r\n  // const d = new Date();\r\n  // const today = d.toLocaleDateString();\r\n  // if (date === today) {\r\n  //   return (\r\n  //     <h3>Today-{today}</h3>\r\n  //   )\r\n  // }\r\n  // else {\r\n  //   return (\r\n  //     <h3>Upcoming-{date}</h3>\r\n  //   )\r\n  // }\r\n\r\n    const taskList = todos.length ?\r\n      (\r\n          todos.map(todo => {\r\n            return (\r\n              // <div className=\"list-groups\">\r\n                <ListGroupItem className=\"my-tasks date-time\" key={todo.id}>\r\n                  <Form>\r\n                    <FormGroup check>\r\n                      <Label check>\r\n                      <Input type=\"checkbox\"/>{' '}\r\n                        <span>{todo.task}</span>\r\n                      </Label>\r\n                    </FormGroup>\r\n                  </Form>\r\n                  {/* <p>{todo.date}</p> */}\r\n                  <p>{todo.time}</p>\r\n                </ListGroupItem>\r\n              // </div>\r\n\r\n             \r\n            )\r\n\r\n            \r\n          })\r\n      ) :\r\n      (\r\n        <p id=\"addTask\">You have no task added</p>\r\n      )\r\n\r\n  // const scheduleList = () => {\r\n  //   if (date !== today) {\r\n  //     return null\r\n  //   }\r\n  //   else {\r\n  //     return (\r\n  //       // <div>\r\n  //         <h3>Today-{date}</h3>\r\n  //       // </div>\r\n  //     )\r\n  //   }\r\n    \r\n  // }\r\n  \r\n    return (\r\n      <div className=\"task-list\">\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <div>\r\n                <h3>{date ? 'Today': 'upcoming'}</h3>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs=\"12\" md={{ size: 6, offset: 3 }}>\r\n              <ListGroup>{taskList}</ListGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs=\"12\" md={{ size: 6, offset: 3 }} className=\"select-all\">\r\n              {\r\n                todos.length ?\r\n                (\r\n                  <Form>\r\n                    <FormGroup row>\r\n                    \r\n                      <Col xs={5}>\r\n                        <FormGroup check>\r\n                          <Label check>\r\n                            <Input type=\"checkbox\" />\r\n                            <span>Select All</span>\r\n                          </Label>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col xs={2}>\r\n                        <Button color=\"danger\">Delete</Button>\r\n                      </Col>\r\n                    </FormGroup>\r\n                  </Form>\r\n                ) : null\r\n              }\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TodoUI;","import React, { Component } from 'react';\nimport AddTask from './components/add-todo';\nimport TodoUI from './components/todo-ui'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos:[\n        // { id: 1, task: 'write code', date: 'Aug 8, 2020', time:'8:00AM' },\n        // { id: 2, task: 'read article', date: 'Aug 8, 2020', time: '8:00AM' },\n        // { id: 3, task: 'search for jobs', date: 'Aug 8, 2020', time: '8:00AM' }\n      ],\n      date: '9' \n    }\n  }\n\n  addTodo = (newTask) => {\n    newTask.id = Math.floor(Math.random() * 1000);\n    if (newTask.id !== this.state.todos.id) {\n      // console.log(newTask.id);\n      let newTodos = [...this.state.todos, newTask];\n      this.setState({\n        todos: newTodos\n      })\n    }\n    else {\n      return null\n    }\n  }\n\n  deleteTask = (delTask) => {\n    // console.log(id)\n    const taskLeft = this.state.todos.filter(todo => {\n      return todo.id !== delTask;\n    });\n    this.setState({\n      todos: taskLeft\n    })\n    // console.log(filterTodo);\n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n        <h2 className=\"\" id=\"task-header\">\n          Task Scheduler\n        </h2>\n        <AddTask addTodo={this.addTodo}/>\n        <TodoUI todos={this.state.todos} date={this.state.date} deleteTask={this.deleteTask}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}